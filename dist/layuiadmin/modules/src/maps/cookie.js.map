{"version":3,"sources":["cookie.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","layui","define","exports","jQuery","jquery","$","factory","amd","require","encode","s","config","raw","encodeURIComponent","decode","decodeURIComponent","stringifyCookieValue","value","json","JSON","stringify","String","parseCookieValue","indexOf","slice","replace","pluses","parse","e","read","converter","isFunction","cookie","key","options","undefined","extend","defaults","expires","days","t","Date","setTime","document","toUTCString","path","domain","secure","join","result","cookies","split","i","l","length","parts","name","shift","removeCookie"],"mappings":"AAGA,GAAIA,SAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,eAAkBF,GAHtQG,OAAMC,QAAQ,UAAW,SAASC,GAChC,GAAIC,GAASH,MAAMI,QACnB,SAAUC,IAQR,SAAUC,GACc,kBAAXL,SAAyBA,OAAOM,IAEzCN,QAAQ,UAAWK,GAGnBA,EAF4B,YAAnB,mBAAOJ,GAAP,YAAAR,QAAOQ,IAERM,QAAQ,UAGRL,IAET,SAASE,GAGV,QAASI,GAAOC,GACd,MAAOC,GAAOC,IAAMF,EAAIG,mBAAmBH,GAG7C,QAASI,GAAOJ,GACd,MAAOC,GAAOC,IAAMF,EAAIK,mBAAmBL,GAG7C,QAASM,GAAqBC,GAC5B,MAAOR,GAAOE,EAAOO,KAAOC,KAAKC,UAAUH,GAASI,OAAOJ,IAG7D,QAASK,GAAiBZ,GACD,IAAnBA,EAAEa,QAAQ,OAEZb,EAAIA,EACDc,MAAM,MACNC,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,MAGtB,KAKE,MADAf,GAAIK,mBAAmBL,EAAEe,QAAQC,EAAQ,MAClCf,EAAOO,KAAOC,KAAKQ,MAAMjB,GAAKA,EACrC,MAAOkB,KAGX,QAASC,GAAKnB,EAAGoB,GACf,GAAIb,GAAQN,EAAOC,IAAMF,EAAIY,EAAiBZ,EAC9C,OAAOL,GAAE0B,WAAWD,GAAaA,EAAUb,GAASA,EAlCtD,GAAIS,GAAS,MAqCTf,EAAUN,EAAE2B,OAAS,SAASC,EAAKhB,EAAOiB,GAG5C,GAAcC,SAAVlB,IAAwBZ,EAAE0B,WAAWd,GAAQ,CAG/C,GAFAiB,EAAU7B,EAAE+B,UAAWzB,EAAO0B,SAAUH,GAET,gBAApBA,GAAQI,QAAsB,CACvC,GAAIC,GAAOL,EAAQI,QACjBE,EAAKN,EAAQI,QAAU,GAAIG,KAC7BD,GAAEE,SAASF,EAAW,MAAPD,GAGjB,MAAQI,UAASX,QACfvB,EAAOwB,GACP,IACAjB,EAAqBC,GACrBiB,EAAQI,QAAU,aAAeJ,EAAQI,QAAQM,cAAgB,GACjEV,EAAQW,KAAO,UAAYX,EAAQW,KAAO,GAC1CX,EAAQY,OAAS,YAAcZ,EAAQY,OAAS,GAChDZ,EAAQa,OAAS,WAAa,IAC9BC,KAAK,IAYT,IAAK,GAPDC,GAAShB,EAAME,UAKfe,EAAUP,SAASX,OAASW,SAASX,OAAOmB,MAAM,SAE7CC,EAAI,EAAGC,EAAIH,EAAQI,OAAQF,EAAIC,EAAGD,IAAK,CAC9C,GAAIG,GAAQL,EAAQE,GAAGD,MAAM,KACzBK,EAAO1C,EAAOyC,EAAME,SACpBzB,EAASuB,EAAMP,KAAK,IAExB,IAAIf,GAAOA,IAAQuB,EAAM,CAEvBP,EAASpB,EAAKG,EAAQf,EACtB,OAIGgB,GAAmCE,UAA3BH,EAASH,EAAKG,MACzBiB,EAAOO,GAAQxB,GAInB,MAAOiB,GAGTtC,GAAO0B,YAEPhC,EAAEqD,aAAe,SAASzB,EAAKC,GAC7B,MAAsBC,UAAlB9B,EAAE2B,OAAOC,KAIb5B,EAAE2B,OAAOC,EAAK,GAAI5B,EAAE+B,UAAWF,GAAWI,eAClCjC,EAAE2B,OAAOC,QAGpB9B,GACHD,EAAQ,SAAU","file":"../../cookie.js","sourcesContent":["layui.define([\"jquery\"], function(exports) {\r\n  var jQuery = layui.jquery;\r\n  (function($) {\r\n    /*!\r\n* jQuery Cookie Plugin v1.4.1\r\n* https://github.com/carhartl/jquery-cookie\r\n*\r\n* Copyright 2013 Klaus Hartl\r\n* Released under the MIT license\r\n*/\r\n    (function(factory) {\r\n      if (typeof define === \"function\" && define.amd) {\r\n        // AMD\r\n        define([\"jquery\"], factory);\r\n      } else if (typeof exports === \"object\") {\r\n        // CommonJS\r\n        factory(require(\"jquery\"));\r\n      } else {\r\n        // Browser globals\r\n        factory(jQuery);\r\n      }\r\n    })(function($) {\r\n      var pluses = /\\+/g;\r\n\r\n      function encode(s) {\r\n        return config.raw ? s : encodeURIComponent(s);\r\n      }\r\n\r\n      function decode(s) {\r\n        return config.raw ? s : decodeURIComponent(s);\r\n      }\r\n\r\n      function stringifyCookieValue(value) {\r\n        return encode(config.json ? JSON.stringify(value) : String(value));\r\n      }\r\n\r\n      function parseCookieValue(s) {\r\n        if (s.indexOf('\"') === 0) {\r\n          // This is a quoted cookie as according to RFC2068, unescape...\r\n          s = s\r\n            .slice(1, -1)\r\n            .replace(/\\\\\"/g, '\"')\r\n            .replace(/\\\\\\\\/g, \"\\\\\");\r\n        }\r\n\r\n        try {\r\n          // Replace server-side written pluses with spaces.\r\n          // If we can't decode the cookie, ignore it, it's unusable.\r\n          // If we can't parse the cookie, ignore it, it's unusable.\r\n          s = decodeURIComponent(s.replace(pluses, \" \"));\r\n          return config.json ? JSON.parse(s) : s;\r\n        } catch (e) {}\r\n      }\r\n\r\n      function read(s, converter) {\r\n        var value = config.raw ? s : parseCookieValue(s);\r\n        return $.isFunction(converter) ? converter(value) : value;\r\n      }\r\n\r\n      var config = ($.cookie = function(key, value, options) {\r\n        // Write\r\n\r\n        if (value !== undefined && !$.isFunction(value)) {\r\n          options = $.extend({}, config.defaults, options);\r\n\r\n          if (typeof options.expires === \"number\") {\r\n            var days = options.expires,\r\n              t = (options.expires = new Date());\r\n            t.setTime(+t + days * 864e5);\r\n          }\r\n\r\n          return (document.cookie = [\r\n            encode(key),\r\n            \"=\",\r\n            stringifyCookieValue(value),\r\n            options.expires ? \"; expires=\" + options.expires.toUTCString() : \"\", // use expires attribute, max-age is not supported by IE\r\n            options.path ? \"; path=\" + options.path : \"\",\r\n            options.domain ? \"; domain=\" + options.domain : \"\",\r\n            options.secure ? \"; secure\" : \"\"\r\n          ].join(\"\"));\r\n        }\r\n\r\n        // Read\r\n\r\n        var result = key ? undefined : {};\r\n\r\n        // To prevent the for loop in the first place assign an empty array\r\n        // in case there are no cookies at all. Also prevents odd result when\r\n        // calling $.cookie().\r\n        var cookies = document.cookie ? document.cookie.split(\"; \") : [];\r\n\r\n        for (var i = 0, l = cookies.length; i < l; i++) {\r\n          var parts = cookies[i].split(\"=\");\r\n          var name = decode(parts.shift());\r\n          var cookie = parts.join(\"=\");\r\n\r\n          if (key && key === name) {\r\n            // If second argument (value) is a function it's a converter...\r\n            result = read(cookie, value);\r\n            break;\r\n          }\r\n\r\n          // Prevent storing a cookie that we couldn't decode.\r\n          if (!key && (cookie = read(cookie)) !== undefined) {\r\n            result[name] = cookie;\r\n          }\r\n        }\r\n\r\n        return result;\r\n      });\r\n\r\n      config.defaults = {};\r\n\r\n      $.removeCookie = function(key, options) {\r\n        if ($.cookie(key) === undefined) {\r\n          return false;\r\n        }\r\n        // Must not alter options, thus extending a fresh object...\r\n        $.cookie(key, \"\", $.extend({}, options, { expires: -1 }));\r\n        return !$.cookie(key);\r\n      };\r\n    });\r\n  })(jQuery);\r\n  exports(\"cookie\", null);\r\n});\r\n"]}